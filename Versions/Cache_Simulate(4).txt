// Gerard Kramer
// CDA 3100 Section 3
// Assignment 2 -- Cache_Simulate.java
// Version 2023/12/02 01:45

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;

public class Cache_Simulate {

    static final int NUMMEMORY = 65536;
    static final int NUMREGS = 8;
    static final int MAXLENGTH = 1000;

    static class State {
        int pc;
        int[] mem = new int[NUMMEMORY];
        int[] reg = new int[NUMREGS];
        int numMemory;
    }

    public static void printState(State state) {
        System.out.println("\n@@@\nstate:");
        System.out.println("\tpc " + state.pc);
        System.out.println("\tmemory:");
        for (int i = 0; i < state.numMemory; i++) {
            System.out.println("\t\tmem[ " + i + " ] " + state.mem[i]);
        }
        System.out.println("\tregisters:");
        for (int i = 0; i < NUMREGS; i++) {
            System.out.println("\t\treg[ " + i + " ] " + state.reg[i]);
        }
        System.out.println("end state");
    }
    
    public static int convertNum(int num) {
        /* convert a 16-bit number into a 32-bit integer */
        if ((num & (1 << 15)) != 0) {
            num -= (1 << 16);
        }
        return num;
    }
    
    
    
    
    
    
    
    
    
    


    public static int countLines(String filename) { // Count the number of lines in the file specified
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            int lines = 0;
            while (reader.readLine() != null) {
                lines++;
            }
            return lines;
        } catch (IOException e) {
            System.out.println("Error counting lines in the file: " + e.getMessage());
            return 0; // Return 0 in case of error
        }
    }
    
    public static int[] readMachineCode(String filename) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(filename));
            // call countLines to determine the size of the machineCode array
            int numInstructions = countLines(filename);
            int[] machineCode = new int[numInstructions];
            String line;
            int index = 0;
            while ((line = reader.readLine()) != null && index < numInstructions) {
                machineCode[index] = Integer.parseInt(line.trim());
                index++;
            }
            return machineCode;
        } catch (IOException e) {
            System.out.println("Error reading machine code file: " + e.getMessage());
            return new int[0]; // Return empty array in case of error
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    System.out.println("Error closing BufferedReader: " + e.getMessage());
                }
            }
        }
    }





    public static class CacheMetadata {

        //dirty blocks

        private Map<Integer, Boolean> dirtyBlocksMap;

        //blocks with data from memory

        private Map<Integer, Boolean> memoryDataBlocksMap;

        //section of memory each block represents

        private Map<Integer, Integer> memorySectionMap;

        //last time used timestamp

        private Map<Integer, Long> lastTimeUsedMap;

        //least recently used timestamp

        private Map<Integer, Long> lruTimestampsMap;

        public CacheMetadata() {
            dirtyBlocksMap = new HashMap<>();
            memoryDataBlocksMap = new HashMap<>();
            memorySectionMap = new HashMap<>();
            lastTimeUsedMap = new HashMap<>();
            lruTimestampsMap = new HashMap<>();
        }
        // methods to update and retrieve info
        public void markBlockAsDirty(int blockNumber, boolean isDirty) {
            dirtyBlocksMap.put(blockNumber, isDirty);
        }

        public void markBlockWithMemoryData(int blockNumber, boolean hasMemData) {
            memoryDataBlocksMap.put(blockNumber, hasMemData);
        }

        public void setBlockMemorySection(int blockNumber, int memSection) {
            memorySectionMap.put(blockNumber, memSection);
        }

        public void updateLastUsed(int blockNumber, long timestamp) {
            lastTimeUsedMap.put(blockNumber, timestamp);
            lruTimestampsMap.put(blockNumber, System.nanoTime());
        }

        public int getLRUBlockInSet(int setNumber) {
            long minTimestamp = Long.MAX_VALUE;
            int lruBlock = -1;
    
            for (Map.Entry<Integer, Long> entry : lruTimestampsMap.entrySet()) {
                int blockNumber = entry.getKey();
                long timestamp = entry.getValue();
                int blockSet = memorySectionMap.getOrDefault(blockNumber, -1);
    
                if (blockSet == setNumber && timestamp < minTimestamp) {
                    minTimestamp = timestamp;
                    lruBlock = blockNumber;
                }
            }
    
            return lruBlock;
        }

        public static class MemorySection {
            private int startAddress;
            private int endAddress;

            public MemorySection(int startAddress, int endAddress) {
                this.startAddress = startAddress;
                this.endAddress = endAddress;
            }

            public int getStartAddress() {
                return startAddress;
            }

            public int getEndAddress() {
                return endAddress;
            }

        }

    }







    public static void main(String[] args) {
        
        boolean debugMode = false;
        State state = new State();
        
        if (debugMode) {
            System.out.println(args[0]);
        }
        
        if (args.length != 4) {
            System.out.println("Usage: java Cache_Simulate <filename>.mc blockSizeInWords numberOfSets blocksPerSet");
            return;
        }

        // Read machine code from the file specified in the command line argument
        String filename = args[0];
        int[] machineCode = readMachineCode(filename);
        
        
        
        int numInstructions = machineCode.length;
        state.numMemory = numInstructions;
        System.arraycopy(machineCode, 0, state.mem, 0, numInstructions);

        Cache myCache;
        int blockSizeInWords;
        int numberOfSets;
        int blocksPerSet;
        try {
            blockSizeInWords = Integer.parseInt(args[1]);
            numberOfSets = Integer.parseInt(args[2]);
            blocksPerSet = Integer.parseInt(args[3]);
            
        } catch (NumberFormatException e) {
            System.out.println("Error parsing cache parameters: " + e.getMessage());
            return;
        }
        myCache = new Cache(blockSizeInWords, numberOfSets, blocksPerSet);

        // Initialize other registers and program counter
        state.pc = 0;
        for (int i = 0; i < NUMREGS; i++) {
            state.reg[i] = 0;
        }
        
        printState(state);
        int numTimes = 0;
        if (debugMode)
            System.out.println("state.numMemory = " + state.numMemory);
    
        System.out.println("\n");
        // Simulation logic
        while (state.pc < state.numMemory) {
            if (debugMode)
                System.out.println("Executing instruction at address " + state.pc);
            // Fetch instruction at current pc
            int instruction = state.mem[state.pc];
            // Extract opcode and fields
            int opcode = (instruction >> 22) & 0x7;
            int regA = (instruction >> 19) & 0x7;
            int regB = (instruction >> 16) & 0x7;
            int destReg = (instruction >> 0) & 0x7;
            int offset = instruction & 0xFFFF;
            if (debugMode) {
                System.out.println("opcode = " + opcode);
                System.out.println("regA = " + regA);
                System.out.println("regB = " + regB);
                System.out.println("destReg = " + destReg);
                System.out.println("offset = " + offset);
            }

            switch (opcode) {
                case 0: // ADD (Add) - R-type format
                    if (debugMode)
                        System.out.println("case 0: ADD");
                    state.reg[destReg] = state.reg[regA] + state.reg[regB];
                    break;
                case 1: // NAND (NAND) - R-type format
                    if (debugMode)
                        System.out.println("case 1: NAND");
                    state.reg[destReg] = ~(state.reg[regA] & state.reg[regB]);
                    break;
                case 2: // LW (Load Word) - I-type format
                    // Calculate the memory address by adding offset with the contents of regA
                    if (debugMode)    
                        System.out.println("case 2: LW");
                    int address = state.reg[regA] + convertNum(offset);
                    // Load the value from memory into regB
                    state.reg[regB] = state.mem[address];
                    break;
                case 3: // SW (Store Word) - I-type format
                    // Calculate the memory address by adding offset with the contents of regA
                    if (debugMode)
                        System.out.println("case 3: SW");
                    address = state.reg[regA] + convertNum(offset);
                    // Store the value from regB into memory
                    state.mem[address] = state.reg[regB];
                    break;
                case 4: // BEQ (Branch Equal) - I-type format
                    // If the contents of regA and regB are the same, branch to the specified address
                    if (debugMode)
                        System.out.println("case 4: BEQ");
                    if (state.reg[regA] == state.reg[regB]) {
                        // Calculate the branch address: PC + 1 (already covered) + offset
                        state.pc += convertNum(offset);
                    }
                    break;
                // case 5: XXX - O-type format (UNUSED)
                case 6: // HALT (Halt) - O-type format
                    // Increment the PC, then halt the machine
                    if (debugMode)
                        System.out.println("case 6: HALT");
                    state.pc++;
                    printState(state);
                    return; // Exit the simulation loop, effectively halting the machine
                case 7: // NOOP (No Operation) - O-type format
                    // Do nothing, simply increment the PC
                    if (debugMode)
                        System.out.println("case 7: NOOP");
                    break;
                default:
                    if (debugMode)
                        System.out.println("default case: present error");
                    System.out.println("Error: Unknown opcode " + opcode);
                    break;
            }

            // Update program counter for the next instruction
            state.pc++;
            printState(state);
            if (debugMode) {
                System.out.println("state.numMemory = " + state.numMemory);
                System.out.println("state.pc = " + state.pc);
            }
            numTimes++;
            
            if (debugMode)
                System.out.println("number of times: " + numTimes + "\n");
        }

        // Print the final state of the simulated machine
        printState(state);
    }
}




class Cache {

    private int blockSizeInWords;
    private int numberOfSets;
    private int blocksPerSet;
    private static final int MAX_CACHE_BLOCKS = 256;

    public int[][][] cacheArr;

    public enum ActionType {
        CACHE_TO_PROCESSOR,
        PROCESSOR_TO_CACHE,
        MEMORY_TO_CACHE,
        CACHE_TO_MEMORY,
        CACHE_TO_NOWHERE
    }

    public Cache(int size, int sets, int blocks) {
        blockSizeInWords = size;
        numberOfSets = sets;
        blocksPerSet = blocks;

        // end program if not a power of 2

        if (powerOfTwo(blockSizeInWords) == false || powerOfTwo(numberOfSets) == false || powerOfTwo(blocksPerSet) == false) {
            System.out.println("Error: blockSizeInWords, numberOfSets, and blocksPerSet all must be powers of 2");
            System.exit(1);
        }

        // end program if too many cache blocks

        if (numberOfSets * blocksPerSet > MAX_CACHE_BLOCKS) {
            System.out.println("Error: too many cache blocks");
            System.exit(1);
        }

        // initialize cache array

        cacheArr = new int[numberOfSets][blocksPerSet][blockSizeInWords];

    }

    public static boolean powerOfTwo(int number) { // check if an int is a power of 2
        return (number > 0) && ((number & (number - 1)) == 0);
    }

    // getters

    public int getBlockSizeInWords() {
        return blockSizeInWords;
    }
    public int getNumberOfSets() {
        return numberOfSets;
    }
    public int getBlocksPerSet() {
        return blocksPerSet;
    }


    public void logCacheAction(int address, int size, ActionType type) {
        System.out.printf("@@@ transferring word [%d-%d] ", address, address + size - 1);
        switch (type) {
            case CACHE_TO_PROCESSOR:
                System.out.println("from the cache to the processor");
                break;
            case PROCESSOR_TO_CACHE:
                System.out.println("from the processor to the cache");
                break;
            case MEMORY_TO_CACHE:
                System.out.println("from the memory to the cache");
                break;
            case CACHE_TO_MEMORY:
                System.out.println("from the cache to the memory");
                break;
            case CACHE_TO_NOWHERE:
                System.out.println("from the cache to nowhere");
                break;
        }
    }



}




